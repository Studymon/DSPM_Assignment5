# Preparations

# Clear workspace
%reset -f

# Import os module and other packages
import os
import numpy as np
import pandas as pd
import requests
import time

# source the ticketmaster key from separate script
with open("./api_keys_py/tm_key.py") as script:
  exec(script.read())

# (07) Perform the first GET request ------------------------------------------

# make request
firstVenues = requests.get("https://app.ticketmaster.com/discovery/v2/venues.json?",
                           params = {"apikey": tm_key,
                                     "countryCode": "DE",
                                     "locale": "*"}).json()

# look at page contents
firstVenues.get("page")

# extract total number of results
n = firstVenues["page"]["totalElements"]
n
# ## 12935

# results per page
n_perPage = firstVenues["page"]["size"]
# ## 20

# look at first elements embedded in subdict
firstVenues["_embedded"]["venues"][0]


# (08) Extract specific information of first GET request ----------------------

# easier to not always refer to a nested list within a nested dict
onlyVenues = firstVenues["_embedded"]["venues"]

# initiate df
firstVenues_df = pd.DataFrame(columns=["name",
                                       "city",
                                       "postalCode",
                                       "address",
                                       "url",
                                       "longitude",
                                       "latitude"],
                              index=range(n_perPage))


for i, venue in enumerate(onlyVenues):
    name = venue["name"]
    city = venue["city"]["name"]
    postalCode = venue["postalCode"]
    address = venue["address"]["line1"]
    url = venue["url"]
    longitude = venue["location"]["longitude"]
    latitude = venue["location"]["latitude"]

    firstVenues_df.iloc[i] = [name, city, postalCode, address, url, longitude, latitude]
    
    
print(firstVenues_df)
# looks good


# (09) Advanced GET request ---------------------------------------------------


# (10) + (11) Visualization Germany -------------------------------------------


# (13) Repeat (09) - (11) for another European Country (my choice: Denmark) ---














